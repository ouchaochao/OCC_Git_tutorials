```安装```
# 如果你的 Linux 是 Ubuntu:
$ sudo apt-get install git-all

# 在 git 中添加用户名 user.name 和 用户 email user.email
$ git config --global user.name "ouchaochao"
$ git config --global user.email "528422793@qq.com"




```创建/修改 版本库```
# 进入一个文件夹,然后初始化它
$ cd OCC_Git_tutorials
$ git init

# 用 status 来查看版本库的状态
$ git status

# 使用 add 把文件添加进版本库 (staged), .指所有文件
$ git add .
# 再次查看状态 status
$ git status
# 最后一步就是提交这次的改变, 并在 -m 自定义这次改变的信息, XXX指你做了什么改变
$ git commit -m "XXX"

# 修改记录 log 
$ git log

# 如果想要查看这次还没 add (unstaged) 的修改部分 和上个已经 commit 的文件有何不同
$ git diff # unstaged
# 如果你已经 add 了这次修改, 文件变成了 “可提交状态” (staged), 我们可以在 diff 中添加参数 --cached 来查看修改
$ git add .   # add 全部修改文件
$ git diff --cached  # staged
# 查看 add 过 (staged) 和 没 add (unstaged) 的修改
$ git diff HEAD  




```回到从前```
# 不管我们之前有没有做了一些 add 工作, 这一步让我们回到 上一次的 commit
$ git reset --hard HEAD    
# 输出
HEAD is now at 904e1ba change 2
-----------------------
# 看看所有的log
$ git log --oneline
# 输出
904e1ba change 2
c6762a1 change 1
13be9a7 create 1.py
-----------------------
# 回到 c10ea64 change 1
# 方式1: "HEAD^"
$ git reset --hard HEAD^  

# 方式2: "commit id"
$ git reset --hard c6762a1
-----------------------
# 看看现在的 log
$ git log --oneline
# 输出
c6762a1 change 1
13be9a7 create 1.py

$ git reflog
# 输出
c6762a1 HEAD@{0}: reset: moving to c6762a1
904e1ba HEAD@{1}: commit (amend): change 2
0107760 HEAD@{2}: commit: change 2
c6762a1 HEAD@{3}: commit: change 1
13be9a7 HEAD@{4}: commit (initial): create 1.py

$ git reset --hard 904e1ba
$ git log --oneline
# 输出
904e1ba change 2
c6762a1 change 1
13be9a7 create 1.py

$ git add 1.py
$ git commit -m "back to change 1 and add comment for 1.py"
$ git log --oneline




```分支管理```
# 我们之前的文件当中, 仅仅只有一条 master 分支, 我们可以通过 --graph 来观看分支:
$ git log --oneline --graph

$ git branch dev    # 建立 dev 分支
$ git branch        # 查看当前分支

$ git checkout dev  # 切换到分支
$ git branch        # 查看当前分支

$ git checkout -b  dev # 直接创建和切换到新建的分支
$ git branch        # 查看当前分支

# 在dev中修改文件不会影响master
$ git commit -am "change 3 in dev"  # "-am": add 所有改变 并直接 commit

# 将 dev 中的修改推送到 master 中
$ git checkout master   # 切换至 master 才能把其他分支合并过来
$ git merge --no-ff -m "keep merge info" dev  # --no-ff 这种方式保留 merge 的commit 信息.
$ git log --oneline --graph

#使用rebase合并
# !!! 只能在你自己的分支中使用 rebase, 和别人共享的部分是不能用 !!!
# 条件:master 和 dev 分支中都有自己的独立修改.
# 当我们想要用 rebase 合并 dev 到 master 的时候
$ git branch

# 输出
  dev
* master
-------------------------
$ git rebase dev # 这时 HEAD 并没有指向 master 或者 dev, 而是停在了 rebase 模式上
$ git branch
* (no branch, rebasing master) # HEAD 在这
  dev
  master
  
# 我们打开 1.py, 手动合并一下两者的不同
$ git add 1.py
$ git rebase --continue # 完成了 rebase 的操作
# $ git log --oneline --graph
# !! 注意 !! 这个例子也说明了使用 rebase 要万分小心, 千万不要在共享的 branch 中 rebase, 不然就像上面那样, 现在 master 的历史已经被 rebase 改变了. master 当中别人提交的 change 4 就被你无情地修改掉了, 所以千万不要在共享分支中使用 rebase.


# 临时修改 (stash)
# 假设我们现在在 dev 分支上快乐地改代码:
$ git checkout dev
# 然后老板的电话来了, 可是我还没有改进完这些代码. 所以我就用 stash 将这些改变暂时放一边.
$ git status -s
$ git stash
# 做其它任务
$ git checkout -b boss
# 完成老板的任务
$ git commit -am "job from boss"
$ git checkout master
$ git merge --no-ff -m "merged boss job" boss
#　恢复暂存
$ git checkout dev
$ git stash list    # 查看在 stash 中的缓存
$ git stash pop　# 通过 pop 来提取这个并继续工作
$ git status -s
# 输出
 M 1.py     # 和最开始一样了
 
# github 
# 先在github创建项目,如XX
$ git remote add origin https://github.com/ouchaochao/xx.git
$ git push -u origin master     # 推送本地 master 去 origin
$ git push -u origin dev        # 推送本地 dev  去 origin

# 推送修改
$ git commit -am "change 5"
$ git push -u origin master
